//Exp 1 A Dynamic Programming based solution for 0-1 Knapsack problem
#include <stdio.h>
// A utility function that returns maximum of two integers
int max(int a, int b) {
if(a>b){
return a;
} else {
return b;
}
}
int main()
{
int i,j,w,k;
int sw=0,sp=0;
int val[] = {15,10,9,5};
int wt[] = {1,5,3,4};
int W = 8;
int n = sizeof(val) / sizeof(val[0]);
int K[n+1][W+1];
//solution vector
int x[]={0,0,0,0};
//code to find maximum profit earned
for (i = 0; i <= n; i++)
{
for (w = 0; w <= W; w++)
{
if (i == 0 || w == 0)
K[i][w] = 0;
else if (wt[i - 1] <= w)
K[i][w] = max(val[i - 1]

+ K[i - 1][w - wt[i - 1]],
K[i - 1][w]);

else
K[i][w] = K[i - 1][w];

}
}
printf("\nMaximum profit=%d\n", K[4][8]);
for(i=0;i<=n;i++){
for(j=0;j<=W;j++)
printf("%d ",K[i][j]);
printf("\n");
}
//code to find items to include or not
i=n,j=W;
while(j>0)
{
printf("\nK[i][j]=%d",K[i][j]);
printf("\tK[i-1][j]=%d\n",K[i-1][j]);
if(K[i][j]==K[i-1][j])
{
printf("\nDo not include item=%d\n",wt[i-1]);
i--;
}
else
{
x[i-1]=wt[i-1];
printf("\nInclude item=%d\n",x[i-1]);
j=j-wt[i-1];
i--;
}
}
printf("\n Included items in knapsack is=\n");
for(k=0;k<4;k++)

{
printf(" %d",x[k]);
}
return 0;
}
/*
Maximum profit=29
0 0 0 0 0 0 0 0 0
0 15 15 15 15 15 15 15 15
0 15 15 15 15 15 25 25 25
0 15 15 15 24 24 25 25 25
0 15 15 15 24 24 25 25 29
K[i][j]=29 K[i-1][j]=25
Include item=4
K[i][j]=24 K[i-1][j]=15
Include item=3
K[i][j]=15 K[i-1][j]=15
Do not include item=5
K[i][j]=15 K[i-1][j]=0
Include item=1
Included items in knapsack is=
1 0 3 4*/

//Exp-1 Greedy fractional knapsack
# include<stdio.h>
void knapsack(int n, float weight[], float profit[], float capacity) {
float x[20], tp = 0;
int i, j, u;
u = capacity;
for (i = 0; i < n; i++)
x[i] = 0.0;
for (i = 0; i < n; i++) {
if (weight[i] > u)
break;
else {
x[i] = 1.0;
tp = tp + profit[i];
u = u - weight[i];
}
}
if (i < n)
x[i] = u / weight[i];
tp = tp + (x[i] * profit[i]);
printf("\nThe result vector is:- ");
for (i = 0; i < n; i++)
printf("%f\t", x[i]);
printf("\nMaximum profit is:- %f", tp);
}
int main() {
float weight[20], profit[20], capacity;
int num, i, j;
float ratio[20], temp;
printf("\nEnter the no. of objects:- ");
scanf("%d", &num);
printf("\nEnter the wts and profits of each object:- ");
for (i = 0; i < num; i++) {
scanf("%f %f", &weight[i], &profit[i]);
}
printf("\nEnter the capacity of knapsack:- ");
scanf("%f", &capacity);
for (i = 0; i < num; i++) {
ratio[i] = profit[i] / weight[i];
}
for (i = 0; i < num; i++) {
for (j = i + 1; j < num; j++) {
if (ratio[i] < ratio[j]) {
temp = ratio[j];
ratio[j] = ratio[i];
ratio[i] = temp;
temp = weight[j];
weight[j] = weight[i];
weight[i] = temp;
temp = profit[j];
profit[j] = profit[i];
profit[i] = temp;

}
}
}
printf("weight and profit ratio in decreasing order:\n");
printf("weight\t\tprofit\t\tratio\n");
for (i = 0; i < num; i++) {
printf("%f\t",weight[i]);
printf("%f\t",profit[i]);
printf("%f\t",ratio[i]);
printf("\n");
}
knapsack(num, weight, profit, capacity);
return(0);
}
/*Enter the no. of objects:- 5
Enter the wts and profits of each object:- 10
20
30
10
2
4
364
23
5
4
Enter the capacity of knapsack:- 50
weight and profit ratio in decreasing order:
weight profit ratio
10.000000 20.000000 2.000000
2.000000 4.000000 2.000000
5.000000 4.000000 0.800000
30.000000 10.000000 0.333333
364.000000 23.000000 0.063187
The result vector is:- 1.000000 1.000000 1.000000 1.000000
0.008242
Maximum profit is:- 38.189560*/

//Exp 2 Bellman ford
#include <stdio.h>
#include <stdlib.h>
int Bellman_Ford(int G[20][20] , int V, int E, int edge[20][2])
{
int i,u,v,k,distance[20],parent[20],S,flag=1;
for(i=0;i<V;i++)
distance[i] = 1000 , parent[i] = -1 ;
printf("Enter source: ");
scanf("%d",&S);
distance[S-1]=0 ;
for(i=0;i<V-1;i++)
{
for(k=0;k<E;k++)
{
u = edge[k][0] , v = edge[k][1] ;
if(distance[u]+G[u][v] < distance[v])
distance[v] = distance[u] + G[u][v] , parent[v]=u ;
}
}
for(k=0;k<E;k++)
{
u = edge[k][0] , v = edge[k][1] ;
if(distance[u]+G[u][v] < distance[v])
flag = 0 ;
}
if(flag)
for(i=0;i<V;i++)
printf("Vertex %d -> cost = %d parent =
%d\n",i+1,distance[i],parent[i]+1);
return flag;
}
int main()
{
int V,edge[20][2],G[20][20],i,j,k=0;
printf("BELLMAN FORD\n");
printf("Enter no. of vertices: ");
scanf("%d",&V);
printf("Enter graph in matrix form:\n");
for(i=0;i<V;i++)
for(j=0;j<V;j++)
{
scanf("%d",&G[i][j]);
if(G[i][j]!=0)
edge[k][0]=i,edge[k++][1]=j;
}
if(Bellman_Ford(G,V,k,edge))
printf("\nNo negative weight cycle\n");
else printf("\nNegative weight cycle exists\n");
return 0;
}
/*BELLMAN FORD
Enter no. of vertices: 4
Enter graph in matrix form:
10 20 32 15 3 50 33 21 55 34 23 11 1 23 4 53
Enter source: 1
Vertex 1 -> cost = 0 parent = 0
Vertex 2 -> cost = 20 parent = 1
Vertex 3 -> cost = 19 parent = 4
Vertex 4 -> cost = 15 parent = 1
No negative weight cycle*/

//Exp 3 N-Queens
#include<stdio.h>
#include<math.h>
int board[20],count;
int main()
{
int n,i,j;
void queen(int row,int n);
printf(" - N Queens Problem Using Backtracking -");
printf("\n\nEnter number of Queens:");
scanf("%d",&n);
queen(1,n);
return 0;
}
//function for printing the solution
void print(int n)
{
int i,j;
printf("\n\nSolution %d:\n\n",++count);
for(i=1;i<=n;++i)
printf("\t%d",i);
for(i=1;i<=n;++i)
{
printf("\n\n%d",i);
for(j=1;j<=n;++j) //for nxn board
{
if(board[i]==j)
printf("\tQ"); //queen at i,j position
else
printf("\t-"); //empty slot
}
}
}
/*funtion to check conflicts
If no conflict for desired postion returns 1 otherwise returns 0*/
int place(int row,int column)
{
int i;
for(i=1;i<=row-1;++i)
{
//checking column and digonal conflicts
if(board[i]==column)
return 0;
else
if(abs(board[i]-column)==abs(i-row))
return 0;
}
return 1; //no conflicts
}
//function to check for proper positioning of queen
void queen(int row,int n)
{
int column;
for(column=1;column<=n;++column)
{
if(place(row,column))
{
board[row]=column; //no conflicts so place queen
if(row==n) //dead end

print(n); //printing the board configuration
else //try queen with next position
queen(row+1,n);
}
}
}
/*/*Exp 4 Branch and Bound Algorithm for Travelling Sales Person*/
#include<stdio.h>
int a[10][10], visited[10], n, cost = 0;
void get() {
int i, j;
printf("Enter No. of Cities: ");
scanf("%d", &n);
printf("\nEnter Cost Matrix: \n");
for (i = 0; i < n; i++) {
printf("\n Enter Elements of Row# : %d\n", i + 1);
for (j = 0; j < n; j++)
scanf("%d", &a[i][j]);
visited[i] = 0;
}
printf("\n\nThe cost matrix is:\n\n");
for (i = 0; i < n; i++) {
printf("\n");
for (j = 0; j < n; j++)
printf("\t %d", a[i][j]);
}
}
void mincost(int city) {
int i, ncity;
visited[city] = 1;
printf("%d –>", city + 1);
ncity = least(city);
if (ncity == 999) {
ncity = 0;
printf("%d", ncity + 1);
cost += a[city][ncity];
return;
}
mincost(ncity);
}
int least(int c) {
int i, nc = 999;
int min = 999, kmin;
for (i = 0; i < n; i++) {
if ((a[c][i] != 0) && (visited[i] == 0))
if (a[c][i] < min) {
min = a[i][0] + a[c][i];
kmin = a[c][i];
nc = i;
}
}
if (min != 999)
cost += kmin;
return nc;
}
void put() {
printf("\n\nMinimum cost:");
printf("%d", cost);
}
void main() {
get();
printf("\n\nThe Path is:\n\n");
mincost(0);
put();
}
/*
Enter No. of Cities: 6
Enter Cost Matrix:
Enter Elements of Row# : 1
999 10 23 42 2 5

Enter Elements of Row# : 2
34 999 23 1 5 31
Enter Elements of Row# : 3
66 43 999 12 5 23
Enter Elements of Row# : 4
79 12 34 999 55 21
Enter Elements of Row# : 5
11 44 32 56 999 10
Enter Elements of Row# : 6
10 20 40 33 23 999
The cost matrix is:
999 10 23 42 2 5
34 999 23 1 5 31
66 43 999 12 5 23
79 12 34 999 55 21
11 44 32 56 999 10
10 20 40 33 23 999
The Path is:
1 –>6 –>5 –>4 –>3 –>2 –>1
Minimum cost:195*/
